buckets:
  default:
  - name: uc1-mef-sog-default
  encrypt:
  - name: uc1-mef-sog-encrypt
    key: uc1-encryption-key

secrets:
    name: glaciation-env-configuration
    accessKey: minio
    secretKey: minio123
    prometheusAuthType: public
tests: true

tenant:
  # Secret for configuring the root MinIO user and the Prometheus authentication
  secrets:
    existingSecret:
      name: glaciation-env-configuration

  tenant:
    name: glaciation
    # Kubernetes secret name that contains MinIO environment variable
    # configurations
    configuration:
      name: glaciation-env-configuration
    pools:
      - name: pool
        # Number of MinIO Tenant pods
        servers: 2
        # Number of volumes per MinIO Tenant pod
        volumesPerServer: 2
        # Size of each volume
        size: 1Gi
        # Storage class of the volumes
        storageClassName: longhorn
        # Minimum and maximum resources requested for each pod
        resources:
          requests:
            cpu: 1
            memory: 2Gi
          limits:
            cpu: 2
            memory: 4Gi
        # Security context of the pods
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          fsGroup: 1000
          fsGroupChangePolicy: "OnRootMismatch"
          runAsNonRoot: true
        # Security context of the containers
        containerSecurityContext:
          runAsUser: 1000
          runAsGroup: 1000
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          seccompProfile:
            type: RuntimeDefault
    # Enable a Prometheus-compatible scraping endpoint
    metrics:
      enabled: true
    # Enable automatic certificate generation and signing
    certificate:
      requestAutoCert: true
    # Define configuration for KES (stateless and distributed key-management
    # system)
    kes:
      image:
        repository: quay.io/minio/kes
        tag: 2024-03-13T17-52-13Z
      imagePullPolicy: IfNotPresent
      replicas: 2
      # Workaround for mounting a custom root certificate
      clientCertSecret:
        name: ca-bundle
        type: kubernetes.io/tls
      # Name of the key created on Vault
      keyName: encryption-key
      serviceAccountName: minio-kes
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        fsGroup: 1000
      containerSecurityContext:
        runAsUser: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        allowPrivilegeEscalation: false
      configuration: |-
        address: :7373
        tls:
          key: /tmp/kes/server.key # Path to the TLS private key
          cert: /tmp/kes/server.crt # Path to the TLS certificate
        admin:
          identity: ${MINIO_KES_IDENTITY}
        cache:
          expiry:
            any: 5m0s
            unused: 20s
        log:
          error: on
          audit: off
        keystore:
          vault:
            endpoint: "https://data-wrapping-vault-internal:8200"
            version: v2
            prefix: "minio-tenant" # Vault will store keys under this prefix
            kubernetes:
              role: "minio-kes"
              jwt: "/var/run/secrets/kubernetes.io/serviceaccount/token"
            tls: # The Vault client TLS configuration for certificate verification
              ca: "/tmp/kes/ca.crt" # Path to PEM root CA certificates
            status:
              ping: 10s # Duration until the server checks Vault's status again
  ingress:
    api:
      enabled: true
      ingressClassName: "nginx"
      # annotations:
      #   # NOTE: To make sure the certificate is trusted by clients we should use
      #   # something like Let's Encrypt
      #   cert-manager.io/cluster-issuer: "private-ca-issuer"
      #   nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      # tls:
      # - hosts:
      #   - glaciation-tenant.integration
      #   secretName: minio-tenant-ingress
      host: glaciation-tenant.integration
      path: /
      pathType: Prefix
    console:
      enabled: true
      ingressClassName: "nginx"
      # annotations:
      #   # NOTE: To make sure the certificate is trusted by clients we should use
      #   # something like Let's Encrypt
      #   cert-manager.io/cluster-issuer: "private-ca-issuer"
      #   nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      # tls:
      # - hosts:
      #   - glaciation-tenant-console.integration
      #   secretName: minio-tenant-console-ingress
      host: glaciation-tenant-console.integration
      path: /
      pathType: Prefix

vault:
  global:
    enabled: true
    tlsDisable: false
  injector:
    enabled: false
  server:
    enabled: true
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 256Mi
        cpu: 250m
    extraEnvironmentVars:
      VAULT_CACERT: /vault/userconfig/vault-tls/ca.crt
      VAULT_TLSCERT: /vault/userconfig/vault-tls/tls.crt
      VAULT_TLSKEY: /vault/userconfig/vault-tls/tls.key
    volumes:
      - name: userconfig-vault-tls
        secret:
          defaultMode: 0440
          secretName: vault-tls
    volumeMounts:
      - mountPath: /vault/userconfig/vault-tls
        name: userconfig-vault-tls
        readOnly: true
    standalone:
      enabled: false
    service:
      enabled: true
      active:
        enabled: false
      standby:
        enabled: false
    dataStorage:
      enabled: true
      size: 10Gi
      storageClass: longhorn
    auditStorage:
      enabled: true
      size: 10Gi
      storageClass: longhorn
    ui:
      enabled: true
    ingress:
      enabled: true
      ingressClassName: nginx
      # annotations:
      #   # NOTE: To make sure the certificate is trusted by clients we should use
      #   # something like Let's Encrypt
      #   cert-manager.io/cluster-issuer: "private-ca-issuer"
      #   nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      # tls:
      # - hosts:
      #   - vault.integration
      #   secretName: vault-ingress
      hosts:
      - host: vault.integration
      activeService: false
    affinity: ""
    ha:
      enabled: true
      replicas: 3
      raft:
        enabled: true
        setNodeId: true
        config: |
          disable_mlock = true
          ui = true

          listener "tcp" {
            address = "[::]:8200"
            cluster_address = "[::]:8201"
            tls_cert_file = "/vault/userconfig/vault-tls/tls.crt"
            tls_key_file  = "/vault/userconfig/vault-tls/tls.key"
            tls_client_ca_file = "/vault/userconfig/vault-tls/ca.crt"

            # Enable unauthenticated metrics access
            telemetry {
              unauthenticated_metrics_access = "true"
            }
          }

          service_registration "kubernetes" {}

          storage "raft" {
            path = "/vault/data"
          }

          telemetry {
            prometheus_retention_time = "30s"
            disable_hostname = true
          }
