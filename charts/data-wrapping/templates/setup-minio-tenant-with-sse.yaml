apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Release.Namespace }}
  labels:
    create-ca-bundle: "true"
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: vault-certificate
  namespace: {{ .Release.Namespace }}
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  secretName: vault-tls
  issuerRef:
    name: private-ca-issuer
    kind: ClusterIssuer
    group: cert-manager.io
  duration: 2160h # 90d
  renewBefore: 360h # 15d
  privateKey:
    algorithm: RSA
    size: 2048
  subject:
    organizations:
      - system:nodes
  commonName: system:node:*.{{ .Release.Namespace }}.svc.cluster.local
  isCA: false
  # TODO: Try restricting usages to digital signature, key encipherment, and
  # server auth
  usages:
  - digital signature
  - key encipherment
  - data encipherment
  - server auth
  - client auth
  dnsNames:
  - "{{ .Release.Namespace }}-vault-internal"
  - "{{ .Release.Namespace }}-vault-internal.{{ .Release.Namespace }}.svc.cluster.local"
  - "*.{{ .Release.Namespace }}-vault-internal"
  - "*.{{ .Release.Namespace }}-vault-internal.{{ .Release.Namespace }}.svc.cluster.local"
  - "*.vault"
  ipAddresses:
  - 127.0.0.1
  - 192.168.49.2
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kes-policy
  namespace: {{ .Release.Namespace }}
data:
  kes-policy.hcl: |
    path "kv/data/minio-tenant/*" {
      capabilities = [ "create", "read" ]
    }
    path "kv/metadata/minio-tenant/*" {
      capabilities = [ "list", "delete" ]
    }
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: minio-kes
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: role-tokenreview-binding
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: minio-kes
  namespace: {{ .Release.Namespace }}
---
apiVersion: v1
kind: Secret
metadata:
  name: minio-kes-secret
  namespace: {{ .Release.Namespace }}
  annotations:
    kubernetes.io/service-account.name: minio-kes
type: kubernetes.io/service-account-token
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: vault-unseal-keys
  namespace: {{ .Release.Namespace }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auto-unseal-vault-cluster
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auto-unseal-vault-cluster
  template:
    metadata:
      labels:
        app: auto-unseal-vault-cluster
    spec:
      initContainers:
      - name: volume-mount-hack
        image: busybox
        command: ["sh", "-c", "chown -R 100:1000 /vault/unseal"]
        volumeMounts:
        - name: vault-unseal-keys
          mountPath: /vault/unseal
        securityContext:
          runAsUser: 0
          privileged: false
          allowPrivilegeEscalation: false
      containers:
      - name: vault
        image: hashicorp/vault:1.16.1
        env:
        - name: "SHARES"
          value: "5"
        - name: "THRESHOLD"
          value: "3"
        command:
        - /bin/sh
        - -c
        - |
          function join {
              vault operator raft join \
                -address=https://$1.{{ .Release.Namespace }}-vault-internal:8200 \
                -leader-ca-cert=@/vault/userconfig/vault-tls/ca.crt \
                -leader-client-cert=@/vault/userconfig/vault-tls/tls.crt \
                -leader-client-key=@/vault/userconfig/vault-tls/tls.key \
                https://{{ .Release.Namespace }}-vault-internal:8200
          }

          function unseal {
              head -n $THRESHOLD /vault/unseal/cluster-keys |
              while read line; do
                vault operator unseal \
                  -address=https://{{ .Release.Namespace }}-vault-internal:8200 \
                  $line;
              done
          }

          # Loop infinitely
          while :
          do
              # Wait for the startup of the Vault pods / delay before next
              # status check
              sleep 30 # it does the job without requiring to create an ad hoc image

              vault operator init -address=https://{{ .Release.Namespace }}-vault-internal:8200 -status
              STATUS=$?

              if [ "$STATUS" -eq 2 ]; then
                  echo '[*] Initialize HA Vault cluster'
                  # TODO: Persist PGP encrypted Vault unseal keys somewhere outside the cluster
                  vault operator init \
                    -address=https://{{ .Release.Namespace }}-vault-internal:8200 \
                    -key-shares=$SHARES \
                    -key-threshold=$THRESHOLD \
                    -format=json > /vault/unseal/response.json

                  # Extract unseal keys from the JSON response
                  awk '/"unseal_keys_b64": \[/{flag=1;next}/\]/{flag=0}flag' /vault/unseal/response.json | sed -n 's/\s*"\(.*\)".*/\1/p' > /vault/unseal/cluster-keys
              fi

              # Ensure all nodes join the HA Vault cluster
              join {{ .Release.Namespace }}-vault-0
              join {{ .Release.Namespace }}-vault-1
              join {{ .Release.Namespace }}-vault-2

              # Unseal HA Vault cluster
              unseal

              if [ "$STATUS" -eq 2 ]; then
                  echo -e '\n[*] Setup HA Vault cluster for integration with MinIO'
                  VAULT_ROOT_TOKEN=$(sed -n 's/\s*"root_token": "\(.*\)".*/\1/p' /vault/unseal/response.json)
                  vault login \
                    -address=https://{{ .Release.Namespace }}-vault-internal:8200 \
                    $VAULT_ROOT_TOKEN
                  vault secrets enable \
                    -address=https://{{ .Release.Namespace }}-vault-internal:8200 \
                    -version=2 \
                    kv
                  vault policy write \
                    -address=https://{{ .Release.Namespace }}-vault-internal:8200 \
                    kes-policy /minio/kes/kes-policy.hcl
                  vault auth enable \
                    -address=https://{{ .Release.Namespace }}-vault-internal:8200 \
                    kubernetes
                  vault write \
                    -address=https://{{ .Release.Namespace }}-vault-internal:8200 \
                    auth/kubernetes/config \
                    token_reviewer_jwt="$(cat /minio/kes/service-account/token)" \
                    kubernetes_host="https://kubernetes.default.svc.cluster.local" \
                    kubernetes_ca_cert="$(cat /minio/kes/service-account/ca.crt)" \
                    issuer="https://kubernetes.default.svc.cluster.local"
                  vault write \
                    -address=https://{{ .Release.Namespace }}-vault-internal:8200 \
                    auth/kubernetes/role/minio-kes \
                    bound_service_account_names=minio-kes \
                    bound_service_account_namespaces={{ .Release.Namespace }} \
                    policies=kes-policy \
                    ttl=1h
              fi
          done
        securityContext:
          runAsUser: 100
          runAsGroup: 1000
          runAsNonRoot: true
          privileged: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
        volumeMounts:
        - mountPath: /etc/ssl/certs/ca.crt
          subPath: ca.crt
          name: ca-bundle
          readOnly: true
        - mountPath: /vault/userconfig/vault-tls
          name: userconfig-vault-tls
          readOnly: true
        - mountPath: /minio/kes/service-account
          name: minio-kes-service-account-token
          readOnly: true
        - mountPath: /minio/kes/kes-policy.hcl
          subPath: kes-policy.hcl
          name: kes-policy
          readOnly: true
        - mountPath: /vault/unseal
          name: vault-unseal-keys
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile:
          type: RuntimeDefault
      volumes:
      - name: ca-bundle
        configMap:
          defaultMode: 0444
          name: ca-bundle
      - name: userconfig-vault-tls
        secret:
          defaultMode: 0440
          secretName: vault-tls
      - name: minio-kes-service-account-token
        secret:
          defaultMode: 0440
          secretName: minio-kes-secret
      - name: kes-policy
        configMap:
          defaultMode: 0440
          name: kes-policy
      - name: vault-unseal-keys
        persistentVolumeClaim:
          claimName: vault-unseal-keys
